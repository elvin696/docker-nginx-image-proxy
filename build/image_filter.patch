--- src/http/modules/ngx_http_image_filter_module.c	2019-09-24 15:35:32.000000000 -0500
+++ ngx_http_image_filter_module.c	2019-09-24 15:38:46.000000000 -0500
@@ -10,7 +10,7 @@
 #include <ngx_http.h>
 
 #include <gd.h>
-
+#include <math.h>
 
 #define NGX_HTTP_IMAGE_OFF       0
 #define NGX_HTTP_IMAGE_TEST      1
@@ -18,6 +18,8 @@
 #define NGX_HTTP_IMAGE_RESIZE    3
 #define NGX_HTTP_IMAGE_CROP      4
 #define NGX_HTTP_IMAGE_ROTATE    5
+#define NGX_HTTP_IMAGE_CROP_KEEPX       6
+#define NGX_HTTP_IMAGE_CROP_KEEPY       7
 
 
 #define NGX_HTTP_IMAGE_START     0
@@ -32,10 +34,16 @@
 #define NGX_HTTP_IMAGE_GIF       2
 #define NGX_HTTP_IMAGE_PNG       3
 #define NGX_HTTP_IMAGE_WEBP      4
-
+#define NGX_HTTP_IMAGE_BMP       5
+#define NGX_HTTP_IMAGE_TIFF      6
 
 #define NGX_HTTP_IMAGE_BUFFERED  0x08
 
+#define NGX_HTTP_IMAGE_OFFSET_CENTER    0
+#define NGX_HTTP_IMAGE_OFFSET_LEFT      1
+#define NGX_HTTP_IMAGE_OFFSET_RIGHT     2
+#define NGX_HTTP_IMAGE_OFFSET_TOP       3
+#define NGX_HTTP_IMAGE_OFFSET_BOTTOM    4
 
 typedef struct {
     ngx_uint_t                   filter;
@@ -45,12 +53,20 @@
     ngx_uint_t                   jpeg_quality;
     ngx_uint_t                   webp_quality;
     ngx_uint_t                   sharpen;
+    ngx_uint_t                   offset_x;
+    ngx_uint_t                   offset_y;
+    ngx_uint_t                   scale_max;
 
     ngx_flag_t                   transparency;
     ngx_flag_t                   interlace;
+    ngx_str_t                    water_image;
+    ngx_str_t                    water_pos;
+    ngx_http_complex_value_t    *output;
 
     ngx_http_complex_value_t    *wcv;
     ngx_http_complex_value_t    *hcv;
+    ngx_http_complex_value_t    *oxcv;
+    ngx_http_complex_value_t    *oycv;
     ngx_http_complex_value_t    *acv;
     ngx_http_complex_value_t    *jqcv;
     ngx_http_complex_value_t    *wqcv;
@@ -70,7 +86,10 @@
     ngx_uint_t                   height;
     ngx_uint_t                   max_width;
     ngx_uint_t                   max_height;
+    ngx_uint_t                   offset_x;
+    ngx_uint_t                   offset_y;
     ngx_uint_t                   angle;
+    ngx_uint_t                   scale_max;
 
     ngx_uint_t                   phase;
     ngx_uint_t                   type;
@@ -116,60 +135,100 @@
     ngx_command_t *cmd, void *conf);
 static char *ngx_http_image_filter_sharpen(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
+static char *ngx_http_image_filter_offset(ngx_conf_t *cf, ngx_command_t *cmd,
+    void *conf);
 static ngx_int_t ngx_http_image_filter_init(ngx_conf_t *cf);
-
+static void ngx_http_image_watermark(ngx_http_request_t *r, 
+    ngx_http_image_filter_conf_t *conf, gdImagePtr src);
+static int my_offset(int calculatedLength, int requestedLength);
+static void my_resize(gdImagePtr original, gdImagePtr destination);
 
 static ngx_command_t  ngx_http_image_filter_commands[] = {
 
     { ngx_string("image_filter"),
-      NGX_HTTP_LOC_CONF|NGX_CONF_TAKE123,
+      NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_TAKE123,
       ngx_http_image_filter,
       NGX_HTTP_LOC_CONF_OFFSET,
       0,
       NULL },
 
     { ngx_string("image_filter_jpeg_quality"),
-      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_TAKE1,
       ngx_http_image_filter_jpeg_quality,
       NGX_HTTP_LOC_CONF_OFFSET,
       0,
       NULL },
 
     { ngx_string("image_filter_webp_quality"),
-      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_TAKE1,
       ngx_http_image_filter_webp_quality,
       NGX_HTTP_LOC_CONF_OFFSET,
       0,
       NULL },
 
     { ngx_string("image_filter_sharpen"),
-      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_TAKE1,
       ngx_http_image_filter_sharpen,
       NGX_HTTP_LOC_CONF_OFFSET,
       0,
       NULL },
 
     { ngx_string("image_filter_transparency"),
-      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_FLAG,
       ngx_conf_set_flag_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
       offsetof(ngx_http_image_filter_conf_t, transparency),
       NULL },
 
     { ngx_string("image_filter_interlace"),
-      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_FLAG,
       ngx_conf_set_flag_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
       offsetof(ngx_http_image_filter_conf_t, interlace),
       NULL },
 
     { ngx_string("image_filter_buffer"),
-      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_size_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
       offsetof(ngx_http_image_filter_conf_t, buffer_size),
       NULL },
 
+    { ngx_string("image_filter_output"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_TAKE1,
+      ngx_http_set_complex_value_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_image_filter_conf_t, output),
+      NULL },
+
+    { ngx_string("image_filter_crop_offset"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_TAKE2,
+      ngx_http_image_filter_offset,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      0,
+      NULL },
+
+    { ngx_string("image_filter_scale_max"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_num_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_image_filter_conf_t, scale_max),
+      NULL },
+
+    { ngx_string("image_filter_water_image"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_str_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_image_filter_conf_t, water_image),
+      NULL },
+
+    { ngx_string("image_filter_water_pos"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_str_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_image_filter_conf_t, water_pos),
+      NULL },
+
       ngx_null_command
 };
 
@@ -213,7 +272,9 @@
     ngx_string("image/jpeg"),
     ngx_string("image/gif"),
     ngx_string("image/png"),
-    ngx_string("image/webp")
+    ngx_string("image/webp"),
+    ngx_string("image/bmp"),
+    ngx_string("image/tiff")
 };
 
 
@@ -296,6 +357,7 @@
     ngx_chain_t                    out;
     ngx_http_image_filter_ctx_t   *ctx;
     ngx_http_image_filter_conf_t  *conf;
+    ngx_str_t                      ofmt = ngx_null_string;
 
     ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0, "image filter");
 
@@ -338,6 +400,28 @@
         /* override content type */
 
         ct = &ngx_http_image_types[ctx->type - 1];
+        if (conf->output != NULL && ngx_http_complex_value(r, conf->output, &ofmt) == NGX_OK) {
+            if (ngx_strncmp(ofmt.data, "jpg", 3) == 0 || ngx_strncmp(ofmt.data, "jpeg", 4) == 0) {
+                ct = &ngx_http_image_types[NGX_HTTP_IMAGE_JPEG - 1];
+
+            } else if (ngx_strncmp(ofmt.data, "gif", 3) == 0){
+                ct = &ngx_http_image_types[NGX_HTTP_IMAGE_GIF - 1];
+
+            } else if (ngx_strncmp(ofmt.data, "png", 3) == 0){
+                ct = &ngx_http_image_types[NGX_HTTP_IMAGE_PNG - 1];
+
+            } else if (ngx_strncmp(ofmt.data, "webp", 4) == 0){
+                ct = &ngx_http_image_types[NGX_HTTP_IMAGE_WEBP - 1];
+
+            } else if (ngx_strncmp(ofmt.data, "bmp", 3) == 0){
+                ct = &ngx_http_image_types[NGX_HTTP_IMAGE_BMP - 1];
+
+            } else if (ngx_strncmp(ofmt.data, "tiff", 4) == 0){
+                ct = &ngx_http_image_types[NGX_HTTP_IMAGE_TIFF - 1];
+
+            }
+        }
+
         r->headers_out.content_type_len = ct->len;
         r->headers_out.content_type = *ct;
         r->headers_out.content_type_lowcase = NULL;
@@ -461,6 +545,17 @@
         /* WebP */
 
         return NGX_HTTP_IMAGE_WEBP;
+    } else if (p[0] == 'B' && p[1] == 'M') {
+        /* BMP */
+
+        return NGX_HTTP_IMAGE_BMP;
+
+    }  else if ((p[0] == 'I' && p[1] == 'I' && p[2] == 42) || (p[0] == 'M' && p[1] == 'M' && p[3] == 42)) 
+    {
+        /* TIFF */
+        
+        return NGX_HTTP_IMAGE_TIFF;
+
     }
 
     return NGX_HTTP_IMAGE_NONE;
@@ -527,6 +622,7 @@
     ngx_int_t                      rc;
     ngx_http_image_filter_ctx_t   *ctx;
     ngx_http_image_filter_conf_t  *conf;
+    ngx_str_t                      ofmt = ngx_null_string;
 
     r->connection->buffered &= ~NGX_HTTP_IMAGE_BUFFERED;
 
@@ -536,6 +632,14 @@
 
     conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);
 
+    /* always transform when convert */
+    if (conf->output != NULL && ngx_http_complex_value(r, conf->output, &ofmt) == NGX_OK) {
+        if (ofmt.len > 2) {
+            ctx->force = 1;
+        }
+    }
+    
+
     if (conf->filter == NGX_HTTP_IMAGE_SIZE) {
         return ngx_http_image_json(r, rc == NGX_OK ? ctx : NULL);
     }
@@ -562,6 +666,11 @@
         return NULL;
     }
 
+    // scale would force to resize image
+    if (conf->scale_max > 1) {
+        ctx->force = 1;
+    }
+
     if (rc == NGX_OK
         && ctx->width <= ctx->max_width
         && ctx->height <= ctx->max_height
@@ -801,6 +910,23 @@
 
         break;
 
+    case NGX_HTTP_IMAGE_BMP:
+        if (ctx->length < 24) {
+            return NGX_DECLINED;
+        }
+
+        width = p[18] * 256 + p[19];
+        height = p[22] * 256 + p[23];
+
+        break;
+
+    case NGX_HTTP_IMAGE_TIFF:
+        /* todo: figure out image size calculation for tiff */
+        width = 0;
+        height = 0;
+
+        break;
+
     default:
 
         return NGX_DECLINED;
@@ -821,8 +947,10 @@
 {
     int                            sx, sy, dx, dy, ox, oy, ax, ay, size,
                                    colors, palette, transparent, sharpen,
-                                   red, green, blue, t;
+                                   red, green, blue, t, scale_max,
+                                   offset_x, offset_y;
     u_char                        *out;
+    double                         ratio, ratio_h;
     ngx_buf_t                     *b;
     ngx_uint_t                     resize;
     gdImagePtr                     src, dst;
@@ -840,6 +968,9 @@
 
     conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);
 
+    scale_max = (int) conf->scale_max;
+    ratio     = 1;
+
     if (!ctx->force
         && ctx->angle == 0
         && (ngx_uint_t) sx <= ctx->max_width
@@ -872,6 +1003,63 @@
 
 transparent:
 
+    if ((int)ctx->max_width > 0) {
+      ratio = ((double) ctx->max_width / (double) sx);
+    }
+
+    if ((int)ctx->max_height > 0) {
+      ratio_h = ((double) ctx->max_height / (double) sy);
+      if (ratio_h > ratio) {
+        ratio = ratio_h;
+      }
+    }
+
+    // pre-resize if using scale and required a larger image
+    if (scale_max > 1) {
+      if (ratio > 1) {
+        // ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "scale max = %d, %d \n", scale_max, scale_max);
+        // ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "scale ratio = %d, %d \n", ratio, ratio);
+
+        if (ratio > (double) scale_max) {
+          ratio = (double) scale_max;
+        }
+
+        /*
+        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "width max = %d, %d \n", ctx->max_width, ctx->max_width);
+        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "width img = %d, %d \n", sx, sx);
+        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "height max = %d, %d \n", ctx->max_height, ctx->max_height);
+        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "height img = %d, %d \n", sy, sy);
+        */
+
+        // ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "scale %d, %d \n", ratio, ratio);
+        dst = ngx_http_image_new(r, sx * ratio, sy * ratio, palette);
+        
+        if (dst == NULL) {
+            gdImageDestroy(src);
+            return NULL;
+        }
+
+        if (transparent == -1) {
+            gdImageSaveAlpha(src, 1);
+            gdImageColorTransparent(src, -1);
+
+            if(colors == 0) {
+                gdImageAlphaBlending(dst, 0);
+                gdImageSaveAlpha(dst, 1);
+            } else {
+                gdImageTrueColorToPalette(dst, 1, 256);
+            }
+        }
+
+        my_resize(src, dst);
+        // set the new original
+        gdImageDestroy(src);
+        src = dst;
+        sx = gdImageSX(src);
+        sy = gdImageSY(src);
+      }
+    }
+
     gdImageColorTransparent(src, -1);
 
     dx = sx;
@@ -901,7 +1089,23 @@
 
         resize = 0;
 
-        if ((double) dx / dy < (double) ctx->max_width / ctx->max_height) {
+        if (conf->filter == NGX_HTTP_IMAGE_CROP_KEEPX) {
+            if ((ngx_uint_t) dx > ctx->max_width) {
+                dy = dy * ctx->max_width / dx;
+                dy = dy ? dy : 1;
+                dx = ctx->max_width;
+                resize = 1;
+            }
+
+        } else if (conf->filter == NGX_HTTP_IMAGE_CROP_KEEPY) {
+            if ((ngx_uint_t) dy > ctx->max_height) {
+                dx = dx * ctx->max_height / dy;
+                dx = dx ? dx : 1;
+                dy = ctx->max_height;
+                resize = 1;
+            }
+
+        } else if ((double) dx / dy < (double) ctx->max_width / ctx->max_height) {
             if ((ngx_uint_t) dx > ctx->max_width) {
                 dy = dy * ctx->max_width / dx;
                 dy = dy ? dy : 1;
@@ -989,7 +1193,9 @@
         }
     }
 
-    if (conf->filter == NGX_HTTP_IMAGE_CROP) {
+    if (conf->filter == NGX_HTTP_IMAGE_CROP
+        || conf->filter == NGX_HTTP_IMAGE_CROP_KEEPX
+        || conf->filter == NGX_HTTP_IMAGE_CROP_KEEPY) {
 
         src = dst;
 
@@ -1016,8 +1222,24 @@
                 return NULL;
             }
 
-            ox /= 2;
-            oy /= 2;
+            offset_x = ngx_http_image_filter_get_value(r, conf->oxcv,
+                                                       conf->offset_x);
+            offset_y = ngx_http_image_filter_get_value(r, conf->oycv,
+                                                       conf->offset_y);
+
+            if (offset_x == NGX_HTTP_IMAGE_OFFSET_LEFT) {
+                ox = 0;
+
+            } else if (offset_x == NGX_HTTP_IMAGE_OFFSET_CENTER) {
+                ox /= 2;
+            }
+
+            if (offset_y == NGX_HTTP_IMAGE_OFFSET_TOP) {
+                oy = 0;
+
+            } else if (offset_y == NGX_HTTP_IMAGE_OFFSET_CENTER) {
+                oy /= 2;
+            }
 
             ngx_log_debug4(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                            "image crop: %d x %d @ %d x %d",
@@ -1048,6 +1270,7 @@
     }
 
     gdImageInterlace(dst, (int) conf->interlace);
+    ngx_http_image_watermark(r, conf, dst);
 
     out = ngx_http_image_out(r, ctx->type, dst, &size);
 
@@ -1122,6 +1345,20 @@
 #endif
         break;
 
+    case NGX_HTTP_IMAGE_BMP:
+        img = gdImageCreateFromBmpPtr(ctx->length, ctx->image);
+        ctx->width = img->sx;
+        ctx->height = img->sy;
+        failed = "gdImageCreateFromBmpPtr() failed";
+        break;
+
+    case NGX_HTTP_IMAGE_TIFF:
+        img = gdImageCreateFromTiffPtr(ctx->length, ctx->image);
+        ctx->width = img->sx;
+        ctx->height = img->sy;
+        failed = "gdImageCreateFromTiffPtr() failed";
+        break;
+
     default:
         failed = "unknown image type";
         break;
@@ -1171,14 +1408,37 @@
     u_char                        *out;
     ngx_int_t                      q;
     ngx_http_image_filter_conf_t  *conf;
+    ngx_str_t                      ofmt = ngx_null_string;
 
     out = NULL;
 
+    conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);
+
+    if (conf->output != NULL && ngx_http_complex_value(r, conf->output, &ofmt) == NGX_OK) {
+        if (ngx_strncmp(ofmt.data, "jpg", 3) == 0 || ngx_strncmp(ofmt.data, "jpeg", 4) == 0){
+            type = NGX_HTTP_IMAGE_JPEG;
+
+        } else if (ngx_strncmp(ofmt.data, "gif", 3) == 0){
+            type = NGX_HTTP_IMAGE_GIF;
+
+        } else if (ngx_strncmp(ofmt.data, "png", 3) == 0){
+            type = NGX_HTTP_IMAGE_PNG;
+
+        } else if (ngx_strncmp(ofmt.data, "webp", 4) == 0){
+            type = NGX_HTTP_IMAGE_WEBP;
+
+        } else if (ngx_strncmp(ofmt.data, "bmp", 3) == 0){
+            type = NGX_HTTP_IMAGE_BMP;
+
+        } else if (ngx_strncmp(ofmt.data, "tiff", 4) == 0){
+            type = NGX_HTTP_IMAGE_TIFF;
+            
+        }
+    }
+
     switch (type) {
 
     case NGX_HTTP_IMAGE_JPEG:
-        conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);
-
         q = ngx_http_image_filter_get_value(r, conf->jqcv, conf->jpeg_quality);
         if (q <= 0) {
             return NULL;
@@ -1195,13 +1455,11 @@
 
     case NGX_HTTP_IMAGE_PNG:
         out = gdImagePngPtr(img, size);
-        failed = "gdImagePngPtr() failed";
+        failed = "gdImagePngPtr() failed";    
         break;
 
     case NGX_HTTP_IMAGE_WEBP:
 #if (NGX_HAVE_GD_WEBP)
-        conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);
-
         q = ngx_http_image_filter_get_value(r, conf->wqcv, conf->webp_quality);
         if (q <= 0) {
             return NULL;
@@ -1214,6 +1472,22 @@
 #endif
         break;
 
+    case NGX_HTTP_IMAGE_BMP:
+        /* reuse jpeg quality value */
+        q = ngx_http_image_filter_get_value(r, conf->jqcv, conf->jpeg_quality);
+        if (q <= 0) {
+            return NULL;
+        }
+
+        out = gdImageBmpPtr(img, size, q);
+        failed = "gdImageBmpPtr() failed";
+        break;
+
+    case NGX_HTTP_IMAGE_TIFF:
+        out = gdImageTiffPtr(img, size);
+        failed = "gdImageTiffPtr() failed";
+        break;
+
     default:
         failed = "unknown image type";
         break;
@@ -1263,7 +1537,27 @@
 
     n = ngx_atoi(value->data, value->len);
 
-    if (n > 0) {
+    if (n == NGX_ERROR) {
+        if (value->len == sizeof("left") - 1
+            && ngx_strncmp(value->data, "left", value->len) == 0)
+        {
+            return NGX_HTTP_IMAGE_OFFSET_LEFT;
+        } else if (value->len == sizeof("right") - 1
+                   && ngx_strncmp(value->data, "right", sizeof("right") - 1) == 0)
+        {
+            return NGX_HTTP_IMAGE_OFFSET_RIGHT;
+        } else if (value->len == sizeof("top") - 1
+                   && ngx_strncmp(value->data, "top", sizeof("top") - 1) == 0)
+        {
+            return NGX_HTTP_IMAGE_OFFSET_TOP;
+        } else if (value->len == sizeof("bottom") - 1
+                   && ngx_strncmp(value->data, "bottom", sizeof("bottom") - 1) == 0)
+        {
+            return NGX_HTTP_IMAGE_OFFSET_BOTTOM;
+        } else {
+            return NGX_HTTP_IMAGE_OFFSET_CENTER;
+        }
+    } else if (n > 0) {
         return (ngx_uint_t) n;
     }
 
@@ -1299,9 +1593,13 @@
     conf->jpeg_quality = NGX_CONF_UNSET_UINT;
     conf->webp_quality = NGX_CONF_UNSET_UINT;
     conf->sharpen = NGX_CONF_UNSET_UINT;
+    conf->angle = NGX_CONF_UNSET_UINT;
     conf->transparency = NGX_CONF_UNSET;
     conf->interlace = NGX_CONF_UNSET;
     conf->buffer_size = NGX_CONF_UNSET_SIZE;
+    conf->offset_x = NGX_CONF_UNSET_UINT;
+    conf->offset_y = NGX_CONF_UNSET_UINT;
+    conf->scale_max = NGX_CONF_UNSET_UINT;
 
     return conf;
 }
@@ -1364,6 +1662,37 @@
     ngx_conf_merge_size_value(conf->buffer_size, prev->buffer_size,
                               1 * 1024 * 1024);
 
+    ngx_conf_merge_str_value(conf->water_image, prev->water_image, "");
+
+    ngx_conf_merge_str_value(conf->water_pos, prev->water_pos, "bottom-right");
+
+    if (conf->offset_x == NGX_CONF_UNSET_UINT) {
+        ngx_conf_merge_uint_value(conf->offset_x, prev->offset_x,
+                                  NGX_HTTP_IMAGE_OFFSET_CENTER);
+
+        if (conf->oxcv == NULL) {
+            conf->oxcv = prev->oxcv;
+        }
+    }
+
+    if (conf->offset_y == NGX_CONF_UNSET_UINT) {
+        ngx_conf_merge_uint_value(conf->offset_y, prev->offset_y,
+                                  NGX_HTTP_IMAGE_OFFSET_CENTER);
+
+        if (conf->oycv == NULL) {
+            conf->oycv = prev->oycv;
+        }
+    }
+
+    if (conf->scale_max == NGX_CONF_UNSET_UINT) {
+        /* 2 is the default max ratio */
+        ngx_conf_merge_uint_value(conf->scale_max, prev->scale_max, 1);
+    }
+
+    if (conf->output == NULL) {
+        conf->output = prev->output;
+    }
+
     return NGX_CONF_OK;
 }
 
@@ -1662,6 +1991,66 @@
 }
 
 
+static char *
+ngx_http_image_filter_offset(ngx_conf_t *cf, ngx_command_t *cmd,
+    void *conf)
+{
+    ngx_http_image_filter_conf_t *imcf = conf;
+
+    ngx_str_t                         *value;
+    ngx_http_complex_value_t           cv;
+    ngx_http_compile_complex_value_t   ccv;
+
+    value = cf->args->elts;
+
+    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
+
+    ccv.cf = cf;
+    ccv.value = &value[1];
+    ccv.complex_value = &cv;
+
+    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
+        return NGX_CONF_ERROR;
+    }
+
+    if (cv.lengths == NULL) {
+        imcf->offset_x = ngx_http_image_filter_value(&value[1]);
+
+    } else {
+        imcf->oxcv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
+        if (imcf->oxcv == NULL) {
+            return NGX_CONF_ERROR;
+        }
+
+        *imcf->oxcv = cv;
+    }
+
+    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
+
+    ccv.cf = cf;
+    ccv.value = &value[2];
+    ccv.complex_value = &cv;
+
+    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
+        return NGX_CONF_ERROR;
+    }
+
+    if (cv.lengths == NULL) {
+        imcf->offset_y = ngx_http_image_filter_value(&value[2]);
+
+    } else {
+        imcf->oycv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
+        if (imcf->oycv == NULL) {
+            return NGX_CONF_ERROR;
+        }
+
+        *imcf->oycv = cv;
+    }
+
+    return NGX_CONF_OK;
+}
+
+
 static ngx_int_t
 ngx_http_image_filter_init(ngx_conf_t *cf)
 {
@@ -1673,3 +2062,109 @@
 
     return NGX_OK;
 }
+
+
+static void 
+ngx_http_image_watermark(ngx_http_request_t *r, ngx_http_image_filter_conf_t *conf, gdImagePtr src)
+{
+    // apply watermark
+    if (ngx_strcmp(conf->water_image.data, "") == 0) {
+      return;
+    }
+
+    int dx, dy;
+
+    dx = gdImageSX(src);
+    dy = gdImageSY(src);
+
+    FILE *watermark_file = fopen((const char *)conf->water_image.data, "r");
+
+    if (watermark_file) {
+        gdImagePtr watermark, watermark_mix;
+        ngx_int_t wdx = 0, wdy = 0;
+
+        watermark = gdImageCreateFromPng(watermark_file);
+        fclose(watermark_file);
+
+        if(watermark != NULL) {
+            watermark_mix = gdImageCreateTrueColor(watermark->sx, watermark->sy);
+
+            if (ngx_strcmp(conf->water_pos.data, "top-left") == 0) {
+                wdx = wdy = 10;
+            } else if (ngx_strcmp(conf->water_pos.data, "top-right") == 0) {
+                wdx = dx - watermark->sx - 10;
+                wdy = 10;
+            } else if (ngx_strcmp(conf->water_pos.data, "center") == 0) {
+                wdx = dx / 2 - watermark->sx / 2;
+                wdy = dy / 2 - watermark->sy / 2;
+            } else if (ngx_strcmp(conf->water_pos.data, "bottom-left") == 0) {
+                wdx = 10;
+                wdy = dy - watermark->sy - 10;
+            } else { // default bottom-right
+                wdx = dx - watermark->sx - 10;
+                wdy = dy - watermark->sy - 10;
+            }
+
+            // if watermark is larger than image set start to 0
+            if (wdx < 0) {
+              wdx = 0;
+            }
+            if (wdy < 0) {
+              wdy = 0;
+            }
+
+            gdImageCopy(watermark_mix, src, 0, 0, wdx, wdy, watermark->sx, watermark->sy);
+            gdImageCopy(watermark_mix, watermark, 0, 0, 0, 0, watermark->sx, watermark->sy);
+            gdImageCopyMerge(src, watermark_mix, wdx, wdy, 0, 0, watermark->sx, watermark->sy, 75);
+            gdImageDestroy(watermark);
+            gdImageDestroy(watermark_mix);
+        } else { 
+          ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "watermark file '%s' is not PNG", conf->water_image.data);
+        }
+    } else {
+        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "watermark file '%s' not found", conf->water_image.data);
+    }
+}
+
+
+static int my_offset(int calculatedLength, int requestedLength) {
+    int offset = 0;
+
+    if (calculatedLength > requestedLength) {
+        offset = (int)((calculatedLength - requestedLength) / 2);
+    }
+    else {
+        offset = (int)((requestedLength - calculatedLength) / 2);
+    }
+
+    return (offset);
+}
+
+
+static void my_resize (gdImagePtr original, gdImagePtr destination) {
+    float originalRatio = (float)original->sx / original->sy;
+    float destinationRatio = (float)destination->sx / destination->sy;
+
+    int destinationX = destination->sx;
+    int destinationY = destination->sy;
+
+    if (destinationRatio > originalRatio) {
+        destinationX = floor(destination->sy * originalRatio);
+    }
+    else {
+        destinationY = floor(destination->sx / originalRatio);
+    }
+
+    gdImageCopyResampled(
+        destination,
+        original,
+        my_offset(destinationX, destination->sx),
+        my_offset(destinationY, destination->sy),
+        0,
+        0,
+        destinationX,
+        destinationY,
+        original->sx,
+        original->sy
+    );
+}
